/*
    This is the PSL grammar
*/

psl = [
    [
        __scope__:blck
        psl_block
        #new_MatchBlock(_, blck)
    ]+
    eof
]

psl_block = [
   id? '{' [ psl_stmt:s #new_MatchHook(blck, s) ]+ '}'
]

psl_stmt = [
    node_seq:ns "=>" 
    [
        hook:h #new_Hook(_, h, ns)
        | event:e #new_Event(_, e, ns)
    ]
    ';'
]

action = [
    event | hook:>_
]

event = [
    id:i #new_text(_, i)
]

hook = [
   @ignore('null') ['#' id:i #new_text(_, i)]
]

node_seq = [
    node_item:>_
    [
        '/'
        '+'?:flags
        num?:depth
        node_item:subn
        #new_MatchAncestor(_, subn, depth, flags)
        | "~~"
        node_item:subn
        #new_MatchSibling(_, subn)
    ]*
    [
        "&&"
        '(' precond_expr:expr ')'
        #new_MatchPrecond(_, expr)
    ]?
]

node_item = [
    [type_node:>_
    | '{' dict_def:dd [','? '...']?:strict #def_into(_, dd, strict) '}'
    | '[' list_def:ld [','? '...']?:strict #def_into(_, ld, strict) ']'
    ]
    ["->" id:i
        #new_MatchCapture(_, i)
    ]?
    | '<' node_seq:>_  '>'
]

node_val = [
    [type_node:>_
    | val_node:>_
    ]
    ["->" id:i
        #new_MatchCapture(_, i)
    ]?
]

val_scalar = [
    num:n #is_num(_, n)
    | float:f #is_float(_, f)
    | string:s #is_str(_, s)
    | qstring:s #is_str(_, s)
    | '*'
]

val_node = [
    val_scalar:v #new_MatchValue(_, v)
    | '{' dict_def:dd [','? '...']?:strict #def_into(_, dd, strict) '}'
    | '[' list_def:ld [','? '...']?:strict #def_into(_, ld, strict) ']'
]

type_node = [
    id:n '^'?
    __scope__:idef
    '('
        [
            '{' dict_def:dd [','? '...']?:strict #add_def_into(idef, dd, strict) '}'
            |'[' list_def:ld [','? '...']?:strict #add_def_into(idef, ld, strict) ']'
        ]?
        node_def:nd
        [','? '...']?:strict
    ')'
    #new_MatchType(_, n, nd, idef, strict)
]

node_def = [
    [ attrs_def:ad  #add_into(_, ad)
    ]*
]

attrs_def = [
    attr_def:ad #add_into(_, ad) [',' attr_def:ad #add_into(_, ad) ]*
]

attr_def = [
    @ignore('null') ['.' id:n] '=' node_val:ns #new_MatchAttr(_, n, ns)
]

dict_def = [
    __scope__:ls
    kv_pair:kp #add_into(ls, kp) [',' kv_pair:kp #add_into(ls, kp) ]*
    #new_MatchDict(_, ls)
]

kv_pair = [
    [val_scalar | '*']:v
    ':'
    [type_node
    | val_node
    ]:ns
    #new_MatchKey(_, v, ns)
    ["->" id:i
        #new_MatchCapturePair(_, i)
    ]?
]

list_def = [
    __scope__:ls
    idx_pair:ip #add_into(ls, ip) [',' idx_pair:ip #add_into(ls, ip) ]* 
    #new_MatchList(_, ls)
]

idx_pair = [
    [num | '*']:n
    ':'
    [type_node
    | val_node
    ]:ns
    #new_MatchIndice(_, n, ns)
    ["->" id:i
        #new_MatchCapturePair(_, i)
    ]?
]

float = [ @ignore("null") [[int frac? | frac] exp?] ]

int = [ '-'?
    [
        digit1_9s
        | digit
    ]
]

frac = [ '.' digits ]

exp = [ e digits ]

digit = [ '0'..'9' ]

digit1_9 = [ '1'..'9' ]

digits = [ digit+ ]

digit1_9s = [ digit1_9 digits ]

e = [ ['e'|'E'] ['+'|'-']? ]

precond_expr = [
    precond_xor:>_
    [
        '|' precond_xor:or
        #new_PrecondOr(_, or)
    ]*
]

precond_xor = [
    precond_and:>_
    [
        '^' precond_and:xor
        #new_PrecondXor(_, xor)
    ]*
]

precond_and = [
    precond_unary:>_
    [
        '&' precond_unary:and
        #new_PrecondAnd(_, and)
    ]*
]

precond_unary = [
    '!' precond_primary:prim #new_PrecondFalse(_, prim)
    | precond_primary:>_
]

precond_primary = [
    [id:i #new_PrecondEvent(_, i) | '(' precond_expr:>_ ')']
]
